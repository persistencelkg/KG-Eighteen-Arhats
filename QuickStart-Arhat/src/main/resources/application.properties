server.port=9000
spring.profiles.active=dev


## apollo config
apollo.bootstrap.enabled=true
apollo.bootstrap.namespaces=application, BIKE.user-feature-es
#apollo.meta=http://xxx:8080
app.id=user-feature

# http配置开始
custom.httpclient.global.socket-time-out=89
custom.httpclient.global.max-total=900
# cycle-order服务
custom.httpclient.config.cycle-order.max-per-route=99
custom.httpclient.config.cycle-order.url-list=/abc,/test/info
custom.httpclient.config.cycle-order.socket-time-out=100
custom.httpclient.config.cycle-order.connection-time-out=100
custom.httpclient.config.cycle-order.special[0].url=/test/info
custom.httpclient.config.cycle-order.special[0].socket-time-out=10
custom.httpclient.config.cycle-order.special[1].url=/test/syste-helath
custom.httpclient.config.cycle-order.special[1].socket-time-out=333
# copuon 服务
custom.httpclient.config.coupon.retry-times=2
custom.httpclient.config.coupon.max-per-route=299

# es
es-config.meta.order.host=xx:9200
es-config.meta.order.user-name=admin
es-config.meta.order.password=12345
es-config.meta.order.socket-timeout=1500
es-config.meta.order.connection-timeout=1000



# db
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/mykjcms?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&serverTimezone=Asia/Shanghai
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.type=com.zaxxer.hikari.HikariDataSource

# sharding
spring.shardingsphere.datasource.names=fuchen
spring.shardingsphere.datasource.fuchen.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.fuchen.jdbc-url = ${spring.datasource.url}
spring.shardingsphere.datasource.fuchen.url = ${spring.datasource.url}
spring.shardingsphere.datasource.fuchen.username = ${spring.datasource.username}
spring.shardingsphere.datasource.fuchen.password = ${spring.datasource.password}

spring.shardingsphere.datasource.fuchen.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.fuchen.test-on-borrow = true
spring.shardingsphere.datasource.fuchen.test-while-idle = true
spring.shardingsphere.datasource.fuchen.min-evictable-idle-time-millis = 30000
spring.shardingsphere.datasource.fuchen.time-between-eviction-runs-millis = 30000
spring.shardingsphere.datasource.fuchen.validation-query = SELECT 1
spring.shardingsphere.datasource.fuchen.executor.size = 4
spring.shardingsphere.datasource.fuchen.max-lifetime = 28770000
spring.shardingsphere.datasource.fuchen.maximum-pool-size = 10
# sharding sql print
spring.shardingsphere.props.sql.show=true
# 分片配置
spring.shardingsphere.sharding.tables.user.actual-data-nodes = fuchen.user_$->{0..3}
spring.shardingsphere.sharding.tables.user.table-strategy.standard.sharding-column = user_id
spring.shardingsphere.sharding.tables.user.table-strategy.standard.precise-algorithm-class-name =org.lkg.algorithm.sharding.UserIdMockPreciseShardingTableAlgorithm

# dynamic-datasource
spring.datasource.dynamic.primary = sharding

mybatis-plus.type-handlers-package=org.lkg.algorithm
#mybatis-plus

mybatis-plus.configuration.map-underscore-to-camel-case=true


#mybatis
mybatis.mapper-locations=classpath*:mapper/**
mybatis.configuration.map-underscore-to-camel-case=true
# mybatis-plus
mybatis-plus.type-aliases-package=org.lkg.bo

# redis
redis.more.enable=1
redis.more.config.feature-redis.connection-timeout=2s
redis.more.config.feature-redis.read-timeout=2s
redis.more.config.feature-redis.host=${test.redis}

redis.more.config.order-redis.connection-timeout=2s
redis.more.config.order-redis.read-timeout=2s
redis.more.config.order-redis.host=${test.redis}
redis.more.config.order-redis.database=13


logging.level.org.springframework.data.redis=DEBUG
logging.level.io.lettuce.core=DEBUG

#cache
feature.local-cache-switch=0


# upload
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=2MB
# thyleaf
spring.thymeleaf.enabled=true
spring.thymeleaf.prefix=classpath:/templates/





# long heng
long-heng.monitor.interval=PT6S




#nacos
spring.cloud.nacos.discovery.namespace=b79e908a-f69e-4561-bb72-96da500d6470
spring.cloud.nacos.discovery.server-addr=${nacos.ip}
spring.cloud.nacos.discovery.username=ucenter_test_nacos
spring.cloud.nacos.discovery.password=${nacos.pass}
#spring.cloud.nacos.discovery.register-enabled=false

#----------------------------------------- 服务发现---------------------------------------------
# feign 基于ribbon 因此feign有的ribbon基本都有，例如RibbonClient、RibbonContext、RibbonLoadBalancer
# 而对应配置类 RibbonClientConfiguration 这是ribbon所有配置的注入核心,ribbon 也有自己的连接池如：apache httpclient、ok httpclient、rest client

# 配置优先级:
# 1. feignClient的接口参数 Request.Options
# 2. feign 配置文件
    #>> feign.client.config.default.connect-timeout=
    #>> feign.client.config.default.read-timeout=
    #>> feign.client.config.default.retryer=org.xxx
# 3. Feign自动注入的全局 Request.Options【如果要定制一定不要使用无参构造，默认是60s】
# 4. ribbon配置文件
# 5. ribbon 默认配置： 默认ConnectTimeout和readTimeOut 都是1s 最兜底的配置


# 使用连接池，推荐配置
#feign.httpclient.enabled=true
ribbon.eager-load.enabled=true
# ribbon的默认配置 >> DefaultClientConfigImpl << 此配置为全局默认配置覆盖
#ribbon.ReadTimeout=2000
#ribbon.ConnectTimeout=1000
# 定制化超时相关配置
atm-coupon.ribbon.ReadTimeout=11
atm-coupon.ribbon.ConnectTimeout=22
# 定制化重试配置>> DefaultLoadBalancerRetryHandler <<
# 基于服务的静态服务发现 如果是用nacos就会对应的NacosServerList实现，如果是eruaka 也会有对应的实现
#atm-coupon.ribbon.NIWSServerListClassName=com.netflix.loadbalancer.ConfigurationBasedServerList
#atm-coupon.ribbon.listOfServers=10.101.26.83:8080
#atm-coupon.ribbon.eureka.enabled=false
